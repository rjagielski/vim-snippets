snippet #!
	#!/usr/bin/env python
snippet imp
	import ${0:module}
snippet uni
	def __unicode__(self):
		${0:representation}
snippet from
	from ${1:package} import ${0:module}
# Module Docstring
snippet docs
	"""
	File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
	Author: `g:snips_author`
	Email: `g:snips_email`
	Github: `g:snips_github`
	Description: ${0}
	"""

snippet wh
	while ${1:condition}:
		${0}
# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1}
		if ${0:condition}:
			break
snippet with
	with ${1:expr} as ${2:var}:
		${0}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${0}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())
# super class call
snippet super
	super(${1:ClassName}, self).${2:Method}(${0})

snippet supera
	super(${1:ClassName}, self).${2:Method}(${0}*args, **kwargs)

# Ifs
snippet if
	if ${1:condition}:
		${0}
snippet el
	else:
		${0}
snippet ei
	elif ${1:condition}:
		${0}
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${0:raise $3}
snippet try Try/Except/Else
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet try Try/Except/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet try Try/Except/Else/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# winpdb debugger
snippet rpdb
	import rpdb2; rpdb2.start_embedded_debugger('asdf')
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# python console debugger (pudb)
snippet pudb
	import pudb; pudb.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})
snippet "
	"""
	${0:doc}
	"""
# assertions
snippet a=
	self.assertEqual(${0}, ${1})
# test function/method
snippet test
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${0}
snippet fut
	from __future__ import ${0}
#getopt
snippet getopt
	try:
		# Short option syntax: "hv:"
		# Long option syntax: "help" or "verbose="
		opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

	except getopt.GetoptError, err:
		# Print debug info
		print str(err)
		${3:error_action}

	for option, argument in opts:
		if option in ("-h", "--help"):
			${0}
		elif option in ("-v", "--verbose"):
			verbose = argument
# logging
# glog = get log
snippet glog
	import logging
	logger = logging.getLogger(${0:__name__})
snippet le
	logger.error(${0:msg})
# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
	logger.debug(${0:msg})
snippet lw
	logger.warning(${0:msg})
snippet lc
	logger.critical(${0:msg})
snippet li
	logger.info(${0:msg})
snippet epydoc
	"""
	${1:Description}

	@param ${2:param}: ${3: Description}
	@type  $2: ${4: Type}

	@return: ${5: Description}
	@rtype : ${6: Type}

	@raise e: ${0: Description}
	"""
# Model Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. auto_now_add=False.

snippet auto
	${1:FIELDNAME} = models.AutoField(${0})
snippet bool
	${1:FIELDNAME} = models.BooleanField(${0:default=True})
snippet char
	${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})
snippet comma
	${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${0:, blank=True})
snippet date
	${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet datetime
	${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet decimal
	${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${0})
snippet email
	${1:FIELDNAME} = models.EmailField(max_length=${2:75}${0:, blank=True})
snippet file
	${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${0:, max_length=100})
snippet filepath
	${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${0:, blank=True, })
snippet float
	${1:FIELDNAME} = models.FloatField(${0})
snippet image
	${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${0:, max_length=100})
snippet int
	${1:FIELDNAME} = models.IntegerField(${0})
snippet ip
	${1:FIELDNAME} = models.IPAddressField(${0})
snippet nullbool
	${1:FIELDNAME} = models.NullBooleanField(${0})
snippet posint
	${1:FIELDNAME} = models.PositiveIntegerField(${0})
snippet possmallint
	${1:FIELDNAME} = models.PositiveSmallIntegerField(${0})
snippet slug
	${1:FIELDNAME} = models.SlugField(max_length=${2:50}${0:, blank=True})
snippet smallint
	${1:FIELDNAME} = models.SmallIntegerField(${0})
snippet text
	${1:FIELDNAME} = models.TextField(${0:blank=True})
snippet time
	${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet url
	${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${0:, blank=True})
snippet xml
	${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${0:, blank=True})
# Relational Fields
snippet fk
	${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${0:, to_field=''})
snippet m2m
	${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${0:, db_table=''})
snippet o2o
	${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${0:, to_field=''})

# Code Skeletons

snippet form
	class ${1:FormName}(forms.Form):
		"""${2:docstring}"""
		${0}

snippet model
	class ${1:ModelName}(models.Model):
		"""${2:docstring}"""
		${3}

		class Meta:
			${4}

		def __unicode__(self):
			${5}

		def save(self, force_insert=False, force_update=False):
			${6}

		@models.permalink
		def get_absolute_url(self):
			return ('${7:view_or_url_name}' ${0})

snippet modeladmin
	class ${1:ModelName}Admin(admin.ModelAdmin):
		${0}

	admin.site.register($1, $1Admin)

snippet tabularinline
	class ${0:ModelName}Inline(admin.TabularInline):
		model = $1

snippet stackedinline
	class ${0:ModelName}Inline(admin.StackedInline):
		model = $1

snippet r2r
	return render_to_response('${1:template.html}', {
			${2}
		}${0:, context_instance=RequestContext(request)}
	)
